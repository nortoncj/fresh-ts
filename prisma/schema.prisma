// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
generator client {
  provider = "prisma-client-js"
}
model Store {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  billboards Billboard[] @relation("StoreToBillboard")
  categories Category[]  @relation("StoreToCategory")
  products   Product[]   @relation("StoreToProduct")
  sizes      Size[]      @relation("StoreToSize")
  colors     Color[]     @relation("StoreToColor")
  orders     Order[]     @relation("StoreToOrder")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
model Billboard {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String     @db.ObjectId
  store      Store      @relation("StoreToBillboard", fields: [storeId], references: [id])
  label      String
  imageUrl   String
  categories Category[]
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  @@index([storeId])
}
model Category {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String    @db.ObjectId // Foreign Key to Store
  store       Store     @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String    @db.ObjectId // Foreign Key to Billboard
  billboard   Billboard @relation(fields: [billboardId], references: [id])
  name        String
  products    Product[] @relation("CategoryToProduct")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  @@index([storeId])
  @@index([billboardId])
}
model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId      String      @db.ObjectId // Foreign Key to Store
  store        Store       @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId   String      @db.ObjectId // Foreign Key to Category
  category     Category    @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name         String
  customizable Boolean     @default(false)
  productInfo  String
  price        String
  unit         Int         @default(1)
  isFeatured   Boolean     @default(false)
  isArchived   Boolean     @default(false)
  sizeId       String      @db.ObjectId // Foreign Key to Size
  size         Size        @relation(fields: [sizeId], references: [id])
  colorId      String      @db.ObjectId // Foreign Key to Color
  color        Color       @relation(fields: [colorId], references: [id])
  images       Image[] // Relation to Image model
  orderItems   OrderItem[] // Relation to Order model
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  CartItem     CartItem[]
  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}
model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  name       String      @default("")
  storeId    String      @db.ObjectId // Foreign Key to Store
  store      Store       @relation("StoreToOrder", fields: [storeId], references: [id])
  email      String      @default("")
  orderItems OrderItem[] // Relation to OrderItem model
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([storeId])
}
model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  lastName         String?
  username         String?            @unique @default(uuid())
  email            String?            @unique
  emailVerified    DateTime?
  hashedPassword   String?
  image            String?
  role             String             @default("Freemium")
  phone            String?
  title            String?
  bio              String?
  address          String?
  proNouns         String?
  link1            String?
  linkText1        String?
  link2            String?
  linkText2        String?
  fb               String?
  tw               String?
  ig               String?
  li               String?
  tt               String?
  yt               String?
  twt              String?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  favoriteIds      String[]           @db.ObjectId
  accounts         Account[]
  sessions         Session[]
  Cart             Cart[]
  UserSubscription UserSubscription[]
  @@map("users")
}


model UserSubscription {
  id                     String    @id @default(auto()) @map("_id") @db.ObjectId
  userId                 String    @db.ObjectId
  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("UserSubscription")
}


model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("sessions")
}
model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
  @@map("verificationtokens")
}
// Intermediary for a many-to-many relationship
model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String  @db.ObjectId // Foreign Key to Order
  order     Order   @relation(fields: [orderId], references: [id])
  productId String  @db.ObjectId // Foreign Key to Product
  image     String?
  branding  Boolean @default(true)
  product   Product @relation(fields: [productId], references: [id])
  @@index([orderId])
  @@index([productId])
}
model Size {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId // Foreign Key to Store
  store     Store     @relation("StoreToSize", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([storeId])
}
model Color {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String    @db.ObjectId // Foreign Key to Store
  store     Store     @relation("StoreToColor", fields: [storeId], references: [id])
  name      String
  value     String
  products  Product[] // Relation to Product model
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  @@index([storeId])
}
model Image {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  productId String   @db.ObjectId // Foreign Key to Product
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url       String // URL of the image
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([productId])
}
// CART MODELS
model Cart {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  items     CartItem[]
  userId    String?    @db.ObjectId
  user      User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  @@map("carts")
}
model CartItem {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  productId   String  @db.ObjectId
  product     Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  customImage String? @default("")
  branded     Boolean @default(true)
  quantity    Int
  cartId      String  @db.ObjectId
  cart        Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  @@map("cartitems")
}